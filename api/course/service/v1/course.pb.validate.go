// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/course/service/v1/course.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseRequestMultiError, or nil if none found.
func (m *CreateCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCourseRequestMultiError(errors)
	}

	return nil
}

// CreateCourseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseRequestMultiError) AllErrors() []error { return m }

// CreateCourseRequestValidationError is the validation error returned by
// CreateCourseRequest.Validate if the designated constraints aren't met.
type CreateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseRequestValidationError) ErrorName() string {
	return "CreateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseRequestValidationError{}

// Validate checks the field values on CreateCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseReplyMultiError, or nil if none found.
func (m *CreateCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCourseReplyMultiError(errors)
	}

	return nil
}

// CreateCourseReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCourseReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseReplyMultiError) AllErrors() []error { return m }

// CreateCourseReplyValidationError is the validation error returned by
// CreateCourseReply.Validate if the designated constraints aren't met.
type CreateCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseReplyValidationError) ErrorName() string {
	return "CreateCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseReplyValidationError{}

// Validate checks the field values on UpdateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseRequestMultiError, or nil if none found.
func (m *UpdateCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourseRequestMultiError(errors)
	}

	return nil
}

// UpdateCourseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseRequestMultiError) AllErrors() []error { return m }

// UpdateCourseRequestValidationError is the validation error returned by
// UpdateCourseRequest.Validate if the designated constraints aren't met.
type UpdateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseRequestValidationError) ErrorName() string {
	return "UpdateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseRequestValidationError{}

// Validate checks the field values on UpdateCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseReplyMultiError, or nil if none found.
func (m *UpdateCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourseReplyMultiError(errors)
	}

	return nil
}

// UpdateCourseReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCourseReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseReplyMultiError) AllErrors() []error { return m }

// UpdateCourseReplyValidationError is the validation error returned by
// UpdateCourseReply.Validate if the designated constraints aren't met.
type UpdateCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseReplyValidationError) ErrorName() string {
	return "UpdateCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseReplyValidationError{}

// Validate checks the field values on DeleteCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseRequestMultiError, or nil if none found.
func (m *DeleteCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCourseRequestMultiError(errors)
	}

	return nil
}

// DeleteCourseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseRequestMultiError) AllErrors() []error { return m }

// DeleteCourseRequestValidationError is the validation error returned by
// DeleteCourseRequest.Validate if the designated constraints aren't met.
type DeleteCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseRequestValidationError) ErrorName() string {
	return "DeleteCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseRequestValidationError{}

// Validate checks the field values on DeleteCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseReplyMultiError, or nil if none found.
func (m *DeleteCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCourseReplyMultiError(errors)
	}

	return nil
}

// DeleteCourseReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCourseReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseReplyMultiError) AllErrors() []error { return m }

// DeleteCourseReplyValidationError is the validation error returned by
// DeleteCourseReply.Validate if the designated constraints aren't met.
type DeleteCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseReplyValidationError) ErrorName() string {
	return "DeleteCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseReplyValidationError{}

// Validate checks the field values on GetCourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseRequestMultiError, or nil if none found.
func (m *GetCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCourseRequestMultiError(errors)
	}

	return nil
}

// GetCourseRequestMultiError is an error wrapping multiple validation errors
// returned by GetCourseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseRequestMultiError) AllErrors() []error { return m }

// GetCourseRequestValidationError is the validation error returned by
// GetCourseRequest.Validate if the designated constraints aren't met.
type GetCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseRequestValidationError) ErrorName() string { return "GetCourseRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseRequestValidationError{}

// Validate checks the field values on GetCourseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCourseReplyMultiError,
// or nil if none found.
func (m *GetCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCourseReplyMultiError(errors)
	}

	return nil
}

// GetCourseReplyMultiError is an error wrapping multiple validation errors
// returned by GetCourseReply.ValidateAll() if the designated constraints
// aren't met.
type GetCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseReplyMultiError) AllErrors() []error { return m }

// GetCourseReplyValidationError is the validation error returned by
// GetCourseReply.Validate if the designated constraints aren't met.
type GetCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseReplyValidationError) ErrorName() string { return "GetCourseReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseReplyValidationError{}

// Validate checks the field values on ListCourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseRequestMultiError, or nil if none found.
func (m *ListCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCourseRequestMultiError(errors)
	}

	return nil
}

// ListCourseRequestMultiError is an error wrapping multiple validation errors
// returned by ListCourseRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseRequestMultiError) AllErrors() []error { return m }

// ListCourseRequestValidationError is the validation error returned by
// ListCourseRequest.Validate if the designated constraints aren't met.
type ListCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseRequestValidationError) ErrorName() string {
	return "ListCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseRequestValidationError{}

// Validate checks the field values on ListCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseReplyMultiError, or nil if none found.
func (m *ListCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCourseReplyMultiError(errors)
	}

	return nil
}

// ListCourseReplyMultiError is an error wrapping multiple validation errors
// returned by ListCourseReply.ValidateAll() if the designated constraints
// aren't met.
type ListCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseReplyMultiError) AllErrors() []error { return m }

// ListCourseReplyValidationError is the validation error returned by
// ListCourseReply.Validate if the designated constraints aren't met.
type ListCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseReplyValidationError) ErrorName() string { return "ListCourseReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseReplyValidationError{}
